"""
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
"""

import math
from fractions import Fraction
from decimal import Decimal, getcontext, ROUND_HALF_UP
import re
import os

getcontext().prec = 15  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é 15 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Ç–æ–π –≤–æ –≤—Å–µ–º —Ñ–∞–π–ª–µ


"""
    –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
"""


class Colors:
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    BOLD = "\033[1m"
    END = "\033[0m"


"""
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 99
"""

number_words = {
    "–Ω–æ–ª—å": 0,
    "–æ–¥–∏–Ω": 1,
    "–¥–≤–∞": 2,
    "—Ç—Ä–∏": 3,
    "—á–µ—Ç—ã—Ä–µ": 4,
    "–ø—è—Ç—å": 5,
    "—à–µ—Å—Ç—å": 6,
    "—Å–µ–º—å": 7,
    "–≤–æ—Å–µ–º—å": 8,
    "–¥–µ–≤—è—Ç—å": 9,
    "–¥–µ—Å—è—Ç—å": 10,
    "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å": 11,
    "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å": 12,
    "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å": 13,
    "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å": 14,
    "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å": 15,
    "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å": 16,
    "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å": 17,
    "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å": 18,
    "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å": 19,
    "–¥–≤–∞–¥—Ü–∞—Ç—å": 20,
    "—Ç—Ä–∏–¥—Ü–∞—Ç—å": 30,
    "—Å–æ—Ä–æ–∫": 40,
    "–ø—è—Ç—å–¥–µ—Å—è—Ç": 50,
    "—à–µ—Å—Ç—å–¥–µ—Å—è—Ç": 60,
    "—Å–µ–º—å–¥–µ—Å—è—Ç": 70,
    "–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç": 80,
    "–¥–µ–≤—è–Ω–æ—Å—Ç–æ": 90,
}


"""
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–µ–ø–µ–Ω–∏ –æ—Ç 2 –¥–æ 20
"""

fraction_words = {
    "–≤—Ç–æ—Ä–∞—è": 2,
    "—Ç—Ä–µ—Ç—å—è": 3,
    "—á–µ—Ç–≤–µ—Ä—Ç–∞—è": 4,
    "–ø—è—Ç–∞—è": 5,
    "—à–µ—Å—Ç–∞—è": 6,
    "—Å–µ–¥—å–º–∞—è": 7,
    "–≤–æ—Å—å–º–∞—è": 8,
    "–¥–µ–≤—è—Ç–∞—è": 9,
    "–¥–µ—Å—è—Ç–∞—è": 10,
    "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∞—è": 11,
    "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è": 12,
    "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–∞—è": 13,
    "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–∞—è": 14,
    "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è": 15,
    "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è": 16,
    "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–∞—è": 17,
    "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–∞—è": 18,
    "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è": 19,
    "–¥–≤–∞–¥—Ü–∞—Ç–∞—è": 20,
}


"""
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

operators = {
    "–ø–ª—é—Å": "+",
    "–º–∏–Ω—É—Å": "-",
    "—É–º–Ω–æ–∂–∏—Ç—å": "*",
    "—Ä–∞–∑–¥–µ–ª–∏—Ç—å": "/",
    "–æ—Å—Ç–∞—Ç–æ–∫": "%",
    "–≤ —Å—Ç–µ–ø–µ–Ω–∏": "**",
    "—Å–∏–Ω—É—Å": "sin",
    "–∫–æ—Å–∏–Ω—É—Å": "cos",
    "—Ç–∞–Ω–≥–µ–Ω—Å": "tan",
    "—Ä–∞–∑–º–µ—â–µ–Ω–∏–π": "perm",
    "—Å–æ—á–µ—Ç–∞–Ω–∏–π": "comb",
    "–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫": "fact",
}


def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")


def text_to_number(text):
    text = text.lower().replace("-", " ").replace(" –∏ ", " ").split()
    number = 0
    negative = False
    frac = None
    for word in text:
        if word == "–º–∏–Ω—É—Å":
            negative = True
        elif word in number_words:
            number += number_words[word]
        elif word in fraction_words:
            frac = Fraction(1, fraction_words[word])
    if frac:
        number = Fraction(number) + frac
    if negative:
        number = -number
    return number


def number_to_text(number):
    if isinstance(number, Fraction):
        number = number.limit_denominator()
        whole = number.numerator // number.denominator
        frac = Fraction(number.numerator % number.denominator, number.denominator)
        result = ""
        if whole:
            result += number_to_text_simple(whole) + " –∏ "
        if frac:
            result += (
                number_to_text_simple(frac.numerator)
                + " "
                + ordinal_from_denominator(frac.denominator)
            )
        return result or "–Ω–æ–ª—å"
    if isinstance(number, float):
        s = str(Decimal(number).quantize(Decimal("0.000001"), rounding=ROUND_HALF_UP))
        if "." in s:
            int_part, dec_part = s.split(".")
            period = detect_period(dec_part)
            result = number_to_text_simple(int(int_part))
            if dec_part and int(dec_part) > 0:
                dec_text = " ".join([number_to_text_simple(int(d)) for d in dec_part])
                result += " –∏ " + dec_text
                if period:
                    result += f" –≤ –ø–µ—Ä–∏–æ–¥–µ {period}"
            return result
        else:
            return number_to_text_simple(int(number))
    return number_to_text_simple(int(number))


def detect_period(decimal_str):
    for l in range(1, 5):
        seq = decimal_str[:l]
        repeated = seq * (len(decimal_str) // l + 1)
        if repeated.startswith(decimal_str):
            return " ".join([number_to_text_simple(int(c)) for c in seq])
    return ""


def number_to_text_simple(n):
    if n == 0:
        return "–Ω–æ–ª—å"
    for k, v in sorted(number_words.items(), key=lambda x: x[1], reverse=True):
        if n >= v:
            rem = n - v
            if rem == 0:
                return k
            else:
                return k + " " + number_to_text_simple(rem)
    return ""


def ordinal_from_denominator(d):
    for k, v in fraction_words.items():
        if v == d:
            return k
    return ""


def calc(expression):
    expression = (
        expression.lower()
        .replace("—Å–∫–æ–±–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è", "(")
        .replace("—Å–∫–æ–±–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è", ")")
    )
    for word, op in operators.items():
        expression = expression.replace(word, op)
    tokens = expression.split()
    for i, tok in enumerate(tokens):
        if tok.isalpha():
            val = text_to_number(tok)
            tokens[i] = (
                f"Fraction({val})" if isinstance(val, Fraction) else str(float(val))
            )
    expr = " ".join(tokens)
    try:
        result = eval(
            expr,
            {
                "__builtins__": None,
                "sin": math.sin,
                "cos": math.cos,
                "tan": math.tan,
                "pi": math.pi,
                "Fraction": Fraction,
                "perm": math.perm,
                "comb": math.comb,
                "fact": math.factorial,
            },
        )
    except Exception as e:
        return f"{Colors.RED}–û—à–∏–±–∫–∞: {e}{Colors.END}"
    if isinstance(result, Fraction) and result.denominator > 1000000:
        result = float(result)
    return number_to_text(result)


def print_header():
    print(f"{Colors.BOLD}{Colors.PURPLE}")
    print("=" * 50)
    print("üî• –¢–ï–ö–°–¢–û–í–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† üî•")
    print("=" * 50)
    print(f"{Colors.END}")


def main():
    clear_screen()
    print_header()
    print(
        f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å –ø–ª—é—Å —Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å'):{Colors.END}"
    )
    expr = input("> ").strip()
    result = calc(expr)
    print(f"{Colors.GREEN}–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}{Colors.END}")


if __name__ == "__main__":
    main()
