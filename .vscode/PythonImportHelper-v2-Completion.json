[
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_1",
        "description": "Первый семестр Shipov.Задание_1",
        "peekOfCode": "y = x = a = None\n# Задаем переменные\ny = int(input())\nx = int(input())\na = int(input())\n# Составляем выражение на вывод\ny = (a / (x ** 2 + 1)) - math.cos(2 * x - 1)\n# Принтим\nprint(y)",
        "detail": "Первый семестр Shipov.Задание_1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_1",
        "description": "Первый семестр Shipov.Задание_1",
        "peekOfCode": "y = int(input())\nx = int(input())\na = int(input())\n# Составляем выражение на вывод\ny = (a / (x ** 2 + 1)) - math.cos(2 * x - 1)\n# Принтим\nprint(y)",
        "detail": "Первый семестр Shipov.Задание_1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_1",
        "description": "Первый семестр Shipov.Задание_1",
        "peekOfCode": "x = int(input())\na = int(input())\n# Составляем выражение на вывод\ny = (a / (x ** 2 + 1)) - math.cos(2 * x - 1)\n# Принтим\nprint(y)",
        "detail": "Первый семестр Shipov.Задание_1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_1",
        "description": "Первый семестр Shipov.Задание_1",
        "peekOfCode": "a = int(input())\n# Составляем выражение на вывод\ny = (a / (x ** 2 + 1)) - math.cos(2 * x - 1)\n# Принтим\nprint(y)",
        "detail": "Первый семестр Shipov.Задание_1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_1",
        "description": "Первый семестр Shipov.Задание_1",
        "peekOfCode": "y = (a / (x ** 2 + 1)) - math.cos(2 * x - 1)\n# Принтим\nprint(y)",
        "detail": "Первый семестр Shipov.Задание_1",
        "documentation": {}
    },
    {
        "label": "reverse_if_multiple_of_four",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_10",
        "description": "Первый семестр Shipov.Задание_10",
        "peekOfCode": "def reverse_if_multiple_of_four(s):\n    # Получаем длину строки\n    length = len(s)\n    # Проверяем, делится ли длина на 4 без остатка\n    if length % 4 == 0:\n        # Создаем пустую строку для результата\n        reversed_string = \"\"\n        # Проходим по строке в обратном порядке\n        for i in range(length - 1, -1, -1):\n            # Добавляем символы в новую строку",
        "detail": "Первый семестр Shipov.Задание_10",
        "documentation": {}
    },
    {
        "label": "sum_dict_values",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "def sum_dict_values(dictionary):\n    return sum(dictionary.values())\n# Преобразуем список в словарь с пустыми значениями\ndef list_to_nested_dict(lst):\n    return {item: {} for item in lst}\n# Проверяем, все ли значения в словаре одинаковые\ndef all_values_equal(dictionary):\n    return len(set(dictionary.values())) == 1\n# Демонстрация работы\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "list_to_nested_dict",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "def list_to_nested_dict(lst):\n    return {item: {} for item in lst}\n# Проверяем, все ли значения в словаре одинаковые\ndef all_values_equal(dictionary):\n    return len(set(dictionary.values())) == 1\n# Демонстрация работы\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(sum_dict_values(test_dict))  # 10\ntest_list = ['a', 'b', 'c']\nprint(list_to_nested_dict(test_list))  # {'a': {}, 'b': {}, 'c': {}}",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "all_values_equal",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "def all_values_equal(dictionary):\n    return len(set(dictionary.values())) == 1\n# Демонстрация работы\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(sum_dict_values(test_dict))  # 10\ntest_list = ['a', 'b', 'c']\nprint(list_to_nested_dict(test_list))  # {'a': {}, 'b': {}, 'c': {}}\ntest_dict_equal = {'a': 1, 'b': 1, 'c': 1}\nprint(all_values_equal(test_dict_equal))  # True",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "test_dict",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "test_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nprint(sum_dict_values(test_dict))  # 10\ntest_list = ['a', 'b', 'c']\nprint(list_to_nested_dict(test_list))  # {'a': {}, 'b': {}, 'c': {}}\ntest_dict_equal = {'a': 1, 'b': 1, 'c': 1}\nprint(all_values_equal(test_dict_equal))  # True",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "test_list = ['a', 'b', 'c']\nprint(list_to_nested_dict(test_list))  # {'a': {}, 'b': {}, 'c': {}}\ntest_dict_equal = {'a': 1, 'b': 1, 'c': 1}\nprint(all_values_equal(test_dict_equal))  # True",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "test_dict_equal",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_11",
        "description": "Первый семестр Shipov.Задание_11",
        "peekOfCode": "test_dict_equal = {'a': 1, 'b': 1, 'c': 1}\nprint(all_values_equal(test_dict_equal))  # True",
        "detail": "Первый семестр Shipov.Задание_11",
        "documentation": {}
    },
    {
        "label": "check_tuple_element",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_12",
        "description": "Первый семестр Shipov.Задание_12",
        "peekOfCode": "def check_tuple_element(tuple_data, element):\n    # Проверяем наличие элемента в кортеже\n    if element in tuple_data:\n        # Считаем количество вхождений элемента\n        count = tuple_data.count(element)\n        print(f\"Элемент '{element}' найден в кортеже. Количество вхождений: {count}\")\n        return count\n    else:\n        print(f\"Элемент '{element}' не найден в кортеже.\")\n        return 0",
        "detail": "Первый семестр Shipov.Задание_12",
        "documentation": {}
    },
    {
        "label": "list_to_unique_tuple",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_12",
        "description": "Первый семестр Shipov.Задание_12",
        "peekOfCode": "def list_to_unique_tuple(string_list):\n    # Преобразуем список в множество для удаления дубликатов, затем в кортеж\n    unique_tuple = tuple(set(string_list))\n    print(f\"Кортеж без повторений: {unique_tuple}\")\n    return unique_tuple\n# Демонстрация работы функций\nif __name__ == \"__main__\":\n    # Пример для части а)\n    print(\"Часть а):\")\n    my_tuple = ('apple', 'banana', 'orange', 'apple', 'grape')",
        "detail": "Первый семестр Shipov.Задание_12",
        "documentation": {}
    },
    {
        "label": "unique_digits_ascending",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_13",
        "description": "Первый семестр Shipov.Задание_13",
        "peekOfCode": "def unique_digits_ascending(number):\n    # Преобразуем число в строку, чтобы работать с каждой цифрой\n    num_str = str(number)\n    # Создаем множество из цифр (автоматически удаляет дубликаты)\n    unique_digits = set(num_str)\n    # Фильтруем только цифры (игнорируем знак минус для отрицательных чисел)\n    digits_only = {d for d in unique_digits if d.isdigit()}\n    # Сортируем цифры в возрастающем порядке и выводим\n    sorted_digits = sorted(digits_only)\n    print(\"Уникальные цифры в возрастающем порядке:\", sorted_digits)",
        "detail": "Первый семестр Shipov.Задание_13",
        "documentation": {}
    },
    {
        "label": "is_strict_subset",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_13",
        "description": "Первый семестр Shipov.Задание_13",
        "peekOfCode": "def is_strict_subset(A, B):\n    # Проверяем, что все элементы A есть в B, и что B имеет дополнительные элементы\n    is_subset = A.issubset(B)\n    has_additional = len(B) > len(A)\n    # Выводим результат проверки\n    if is_subset and has_additional:\n        print(\"Множество A является строгим подмножеством множества B\")\n        return True\n    else:\n        print(\"Множество A НЕ является строгим подмножеством множества B\")",
        "detail": "Первый семестр Shipov.Задание_13",
        "documentation": {}
    },
    {
        "label": "A1",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "A1 = int(input(\"Введите A1: \"))\nB1 = int(input(\"Введите B1: \"))\nC1 = int(input(\"Введите C1: \"))\nA2 = int(input(\"Введите A2: \"))\nB2 = int(input(\"Введите B2: \"))\nC2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "B1",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "B1 = int(input(\"Введите B1: \"))\nC1 = int(input(\"Введите C1: \"))\nA2 = int(input(\"Введите A2: \"))\nB2 = int(input(\"Введите B2: \"))\nC2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "C1 = int(input(\"Введите C1: \"))\nA2 = int(input(\"Введите A2: \"))\nB2 = int(input(\"Введите B2: \"))\nC2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "A2",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "A2 = int(input(\"Введите A2: \"))\nB2 = int(input(\"Введите B2: \"))\nC2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "B2",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "B2 = int(input(\"Введите B2: \"))\nC2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "C2 = int(input(\"Введите C2: \"))\n# Вычисляем определитель\nD = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "D = (A1 * B2) - (A2 * B1)\n# Вычисляем x и y\nx = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "x = (C1 * B2 - C2 * B1) / D\ny = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_2",
        "description": "Первый семестр Shipov.Задание_2",
        "peekOfCode": "y = (A1 * C2 - A2 * C1) / D\n# Выводим результат\nprint(\"x =\", x)\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_3",
        "description": "Первый семестр Shipov.Задание_3",
        "peekOfCode": "x = float(input(\"Введите x: \"))\na = float(input(\"Введите a: \"))\n# Вычисляем по условию\nif x > 1:\n    y = 2 * a * (x ** 2) - 1\nelse:\n    y = 1 / a\n# Вывод\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_3",
        "description": "Первый семестр Shipov.Задание_3",
        "peekOfCode": "a = float(input(\"Введите a: \"))\n# Вычисляем по условию\nif x > 1:\n    y = 2 * a * (x ** 2) - 1\nelse:\n    y = 1 / a\n# Вывод\nprint(\"y =\", y)",
        "detail": "Первый семестр Shipov.Задание_3",
        "documentation": {}
    },
    {
        "label": "Price",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_4",
        "description": "Первый семестр Shipov.Задание_4",
        "peekOfCode": "Price = float(input('Введите цену за 1кг: '))\nCount_st = 12\n# Выполняем условие перебора\nwhile Count_st <= 20:\n    print(Price * Count_st / 10)\n    Count_st += 2",
        "detail": "Первый семестр Shipov.Задание_4",
        "documentation": {}
    },
    {
        "label": "Count_st",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_4",
        "description": "Первый семестр Shipov.Задание_4",
        "peekOfCode": "Count_st = 12\n# Выполняем условие перебора\nwhile Count_st <= 20:\n    print(Price * Count_st / 10)\n    Count_st += 2",
        "detail": "Первый семестр Shipov.Задание_4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_5",
        "description": "Первый семестр Shipov.Задание_5",
        "peekOfCode": "n = int(input('Введите число n: '))\nif n <= 0:\n\tprint('1')\nelse:\n\tchislo = 1\n\tfor perebor in range(0, n + 1):\n\t\tchislo += 1 / math.factorial(perebor)\nprint(chislo)",
        "detail": "Первый семестр Shipov.Задание_5",
        "documentation": {}
    },
    {
        "label": "\tchislo",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_5",
        "description": "Первый семестр Shipov.Задание_5",
        "peekOfCode": "\tchislo = 1\n\tfor perebor in range(0, n + 1):\n\t\tchislo += 1 / math.factorial(perebor)\nprint(chislo)",
        "detail": "Первый семестр Shipov.Задание_5",
        "documentation": {}
    },
    {
        "label": "spicok",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_6",
        "description": "Первый семестр Shipov.Задание_6",
        "peekOfCode": "spicok = []\nspicok_sort = []\n# Добавляем список\nperebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 2 == 0:\n        spicok_sort.append(spicok[perebor1])",
        "detail": "Первый семестр Shipov.Задание_6",
        "documentation": {}
    },
    {
        "label": "spicok_sort",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_6",
        "description": "Первый семестр Shipov.Задание_6",
        "peekOfCode": "spicok_sort = []\n# Добавляем список\nperebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 2 == 0:\n        spicok_sort.append(spicok[perebor1])\n    else:",
        "detail": "Первый семестр Shipov.Задание_6",
        "documentation": {}
    },
    {
        "label": "perebor2",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_6",
        "description": "Первый семестр Shipov.Задание_6",
        "peekOfCode": "perebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 2 == 0:\n        spicok_sort.append(spicok[perebor1])\n    else:\n        spicok_sort.append(0)\nprint(spicok_sort)",
        "detail": "Первый семестр Shipov.Задание_6",
        "documentation": {}
    },
    {
        "label": "spicok",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_7",
        "description": "Первый семестр Shipov.Задание_7",
        "peekOfCode": "spicok = []\nspicok_sort = []\n# Добавляем список\nperebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 3 == 0:\n        spicok_sort.append(spicok[perebor1])",
        "detail": "Первый семестр Shipov.Задание_7",
        "documentation": {}
    },
    {
        "label": "spicok_sort",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_7",
        "description": "Первый семестр Shipov.Задание_7",
        "peekOfCode": "spicok_sort = []\n# Добавляем список\nperebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 3 == 0:\n        spicok_sort.append(spicok[perebor1])\n# Сортируем ",
        "detail": "Первый семестр Shipov.Задание_7",
        "documentation": {}
    },
    {
        "label": "perebor2",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_7",
        "description": "Первый семестр Shipov.Задание_7",
        "peekOfCode": "perebor2 = int(input('Введите сколько чисел хотите добавить: '))\nfor perebor in range(0, perebor2):\n    spicok.append(input('Введите числа для добавления в список: '))\n# Перебераем список и переносим его в другой\nfor perebor1 in range(0, len(spicok)):\n    if int(spicok[perebor1]) % 3 == 0:\n        spicok_sort.append(spicok[perebor1])\n# Сортируем \nspicok_sort = sorted(spicok_sort)\n# Принтим",
        "detail": "Первый семестр Shipov.Задание_7",
        "documentation": {}
    },
    {
        "label": "spicok_sort",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_7",
        "description": "Первый семестр Shipov.Задание_7",
        "peekOfCode": "spicok_sort = sorted(spicok_sort)\n# Принтим\nprint((spicok_sort))",
        "detail": "Первый семестр Shipov.Задание_7",
        "documentation": {}
    },
    {
        "label": "swap_quarters",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "def swap_quarters(matrix):\n\t# Получаем количество строк и столбцов матрицы\n\tM = len(matrix)\n\tN = len(matrix[0])\n\t# Проверяем, что размерности матрицы четные\n\tif M % 2 != 0 or N % 2 != 0:\n\t\traise ValueError(\"Размеры матрицы должны быть четными числами\")\n\t# Вычисляем середины матрицы по строкам и столбцам\n\tmid_row = M // 2\n\tmid_col = N // 2",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\tM",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\tM = len(matrix)\n\tN = len(matrix[0])\n\t# Проверяем, что размерности матрицы четные\n\tif M % 2 != 0 or N % 2 != 0:\n\t\traise ValueError(\"Размеры матрицы должны быть четными числами\")\n\t# Вычисляем середины матрицы по строкам и столбцам\n\tmid_row = M // 2\n\tmid_col = N // 2\n\t# Проходим по всем элементам левой верхней и правой нижней четвертей\n\tfor i in range(mid_row):",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\tN",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\tN = len(matrix[0])\n\t# Проверяем, что размерности матрицы четные\n\tif M % 2 != 0 or N % 2 != 0:\n\t\traise ValueError(\"Размеры матрицы должны быть четными числами\")\n\t# Вычисляем середины матрицы по строкам и столбцам\n\tmid_row = M // 2\n\tmid_col = N // 2\n\t# Проходим по всем элементам левой верхней и правой нижней четвертей\n\tfor i in range(mid_row):\n\t\tfor j in range(mid_col):",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\tmid_row",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\tmid_row = M // 2\n\tmid_col = N // 2\n\t# Проходим по всем элементам левой верхней и правой нижней четвертей\n\tfor i in range(mid_row):\n\t\tfor j in range(mid_col):\n\t\t\t# Сохраняем значение из левой верхней четверти\n\t\t\ttemp = matrix[i][j]\n\t\t\t# Заменяем значение в левой верхней четверти на значение из правой нижней\n\t\t\tmatrix[i][j] = matrix[i + mid_row][j + mid_col]\n\t\t\t# Заменяем значение в правой нижней четверти на сохраненное значение",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\tmid_col",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\tmid_col = N // 2\n\t# Проходим по всем элементам левой верхней и правой нижней четвертей\n\tfor i in range(mid_row):\n\t\tfor j in range(mid_col):\n\t\t\t# Сохраняем значение из левой верхней четверти\n\t\t\ttemp = matrix[i][j]\n\t\t\t# Заменяем значение в левой верхней четверти на значение из правой нижней\n\t\t\tmatrix[i][j] = matrix[i + mid_row][j + mid_col]\n\t\t\t# Заменяем значение в правой нижней четверти на сохраненное значение\n\t\t\tmatrix[i + mid_row][j + mid_col] = temp",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\t\t\ttemp",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\t\t\ttemp = matrix[i][j]\n\t\t\t# Заменяем значение в левой верхней четверти на значение из правой нижней\n\t\t\tmatrix[i][j] = matrix[i + mid_row][j + mid_col]\n\t\t\t# Заменяем значение в правой нижней четверти на сохраненное значение\n\t\t\tmatrix[i + mid_row][j + mid_col] = temp\n\treturn matrix\n# Пример использования\nmatrix = [\n\t[1, 2, 3, 4],\n\t[5, 6, 7, 8],",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "\t\t\tmatrix[i][j]",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "\t\t\tmatrix[i][j] = matrix[i + mid_row][j + mid_col]\n\t\t\t# Заменяем значение в правой нижней четверти на сохраненное значение\n\t\t\tmatrix[i + mid_row][j + mid_col] = temp\n\treturn matrix\n# Пример использования\nmatrix = [\n\t[1, 2, 3, 4],\n\t[5, 6, 7, 8],\n\t[9, 10, 11, 12],\n\t[13, 14, 15, 16]",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "matrix = [\n\t[1, 2, 3, 4],\n\t[5, 6, 7, 8],\n\t[9, 10, 11, 12],\n\t[13, 14, 15, 16]\n]\nprint(\"Исходная матрица:\")\nfor row in matrix:\n\tprint(row)\nresult = swap_quarters(matrix)",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Первый семестр Shipov.Задание_8",
        "description": "Первый семестр Shipov.Задание_8",
        "peekOfCode": "result = swap_quarters(matrix)\nprint(\"\\nМатрица после обмена четвертей:\")\nfor row in result:\n\tprint(row)",
        "detail": "Первый семестр Shipov.Задание_8",
        "documentation": {}
    },
    {
        "label": "find_longest_word_length",
        "kind": 2,
        "importPath": "Первый семестр Shipov.Задание_9",
        "description": "Первый семестр Shipov.Задание_9",
        "peekOfCode": "def find_longest_word_length(text):\n    return max(len(word) for word in text.split())",
        "detail": "Первый семестр Shipov.Задание_9",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.3",
        "description": "Практика первый семестр.2.Задание 2.1.3",
        "peekOfCode": "text = input()  # читаем строку\nprice_kop = len(text) * 60  # считаем стоимость в копейках\nrub = price_kop // 100      # целые рубли\nkop = price_kop % 100       # остаток копеек\nprint(f\"{rub} р. {kop} коп.\")",
        "detail": "Практика первый семестр.2.Задание 2.1.3",
        "documentation": {}
    },
    {
        "label": "price_kop",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.3",
        "description": "Практика первый семестр.2.Задание 2.1.3",
        "peekOfCode": "price_kop = len(text) * 60  # считаем стоимость в копейках\nrub = price_kop // 100      # целые рубли\nkop = price_kop % 100       # остаток копеек\nprint(f\"{rub} р. {kop} коп.\")",
        "detail": "Практика первый семестр.2.Задание 2.1.3",
        "documentation": {}
    },
    {
        "label": "rub",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.3",
        "description": "Практика первый семестр.2.Задание 2.1.3",
        "peekOfCode": "rub = price_kop // 100      # целые рубли\nkop = price_kop % 100       # остаток копеек\nprint(f\"{rub} р. {kop} коп.\")",
        "detail": "Практика первый семестр.2.Задание 2.1.3",
        "documentation": {}
    },
    {
        "label": "kop",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.3",
        "description": "Практика первый семестр.2.Задание 2.1.3",
        "peekOfCode": "kop = price_kop % 100       # остаток копеек\nprint(f\"{rub} р. {kop} коп.\")",
        "detail": "Практика первый семестр.2.Задание 2.1.3",
        "documentation": {}
    },
    {
        "label": "animals",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.5",
        "description": "Практика первый семестр.2.Задание 2.1.5",
        "peekOfCode": "animals = [\n    \"Дракон\", \"Змея\", \"Лошадь\", \"Овца\",\n    \"Обезьяна\", \"Петух\", \"Собака\", \"Свинья\",\n    \"Крыса\", \"Бык\", \"Тигр\", \"Заяц\"\n]\nyear = int(input())\nprint(animals[(year - 2000) % 12])",
        "detail": "Практика первый семестр.2.Задание 2.1.5",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.5",
        "description": "Практика первый семестр.2.Задание 2.1.5",
        "peekOfCode": "year = int(input())\nprint(animals[(year - 2000) % 12])",
        "detail": "Практика первый семестр.2.Задание 2.1.5",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.6",
        "description": "Практика первый семестр.2.Задание 2.1.6",
        "peekOfCode": "num = input().strip()\n# Если число 6-значное, отделяем первую цифру\nif len(num) == 6:\n    first = num[0]\n    last_five = num[1:]\n    reversed_five = last_five[::-1]\n    result = first + str(int(reversed_five))  # int убирает ведущие нули\nelse:\n    last_five = num\n    reversed_five = last_five[::-1]",
        "detail": "Практика первый семестр.2.Задание 2.1.6",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.7",
        "description": "Практика первый семестр.2.Задание 2.1.7",
        "peekOfCode": "n = int(input())\nprint(f\"{n:,}\")",
        "detail": "Практика первый семестр.2.Задание 2.1.7",
        "documentation": {}
    },
    {
        "label": "josephus",
        "kind": 2,
        "importPath": "Практика первый семестр.2.Задание 2.1.8",
        "description": "Практика первый семестр.2.Задание 2.1.8",
        "peekOfCode": "def josephus(n, k):\n    res = 0\n    for i in range(1, n + 1):\n        res = (res + k) % i\n    return res + 1   # +1, так как люди нумеруются с 1\nn = int(input())\nk = int(input())\nprint(josephus(n, k))",
        "detail": "Практика первый семестр.2.Задание 2.1.8",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.8",
        "description": "Практика первый семестр.2.Задание 2.1.8",
        "peekOfCode": "n = int(input())\nk = int(input())\nprint(josephus(n, k))",
        "detail": "Практика первый семестр.2.Задание 2.1.8",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.1.8",
        "description": "Практика первый семестр.2.Задание 2.1.8",
        "peekOfCode": "k = int(input())\nprint(josephus(n, k))",
        "detail": "Практика первый семестр.2.Задание 2.1.8",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.1",
        "description": "Практика первый семестр.2.Задание 2.2.1",
        "peekOfCode": "n = int(input())  # количество точек\nq1 = q2 = q3 = q4 = 0\nfor _ in range(n):\n    x, y = map(int, input().split())\n    if x > 0 and y > 0:\n        q1 += 1\n    elif x < 0 and y > 0:\n        q2 += 1\n    elif x < 0 and y < 0:\n        q3 += 1",
        "detail": "Практика первый семестр.2.Задание 2.2.1",
        "documentation": {}
    },
    {
        "label": "q1",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.1",
        "description": "Практика первый семестр.2.Задание 2.2.1",
        "peekOfCode": "q1 = q2 = q3 = q4 = 0\nfor _ in range(n):\n    x, y = map(int, input().split())\n    if x > 0 and y > 0:\n        q1 += 1\n    elif x < 0 and y > 0:\n        q2 += 1\n    elif x < 0 and y < 0:\n        q3 += 1\n    elif x > 0 and y < 0:",
        "detail": "Практика первый семестр.2.Задание 2.2.1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.10",
        "description": "Практика первый семестр.2.Задание 2.2.10",
        "peekOfCode": "n = int(input().strip())\ninfected = []\nfor idx in range(n):\n    s = input().strip()\n    target = \"anton\"\n    pos = 0\n    for char in s:\n        if pos < len(target) and char == target[pos]:\n            pos += 1\n        if pos == len(target):",
        "detail": "Практика первый семестр.2.Задание 2.2.10",
        "documentation": {}
    },
    {
        "label": "infected",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.10",
        "description": "Практика первый семестр.2.Задание 2.2.10",
        "peekOfCode": "infected = []\nfor idx in range(n):\n    s = input().strip()\n    target = \"anton\"\n    pos = 0\n    for char in s:\n        if pos < len(target) and char == target[pos]:\n            pos += 1\n        if pos == len(target):\n            infected.append(str(idx + 1))",
        "detail": "Практика первый семестр.2.Задание 2.2.10",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.11",
        "description": "Практика первый семестр.2.Задание 2.2.11",
        "peekOfCode": "s = input() + \" запретил букву\"\nalphabet = \"абвгдежзийклмнопрстуфхцчшщъыьэюя\"\nfor c in alphabet:\n    if c in s:\n        print(s, c)\n        s = s.replace(c, \"\").replace(\"  \", \" \").strip()",
        "detail": "Практика первый семестр.2.Задание 2.2.11",
        "documentation": {}
    },
    {
        "label": "alphabet",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.11",
        "description": "Практика первый семестр.2.Задание 2.2.11",
        "peekOfCode": "alphabet = \"абвгдежзийклмнопрстуфхцчшщъыьэюя\"\nfor c in alphabet:\n    if c in s:\n        print(s, c)\n        s = s.replace(c, \"\").replace(\"  \", \" \").strip()",
        "detail": "Практика первый семестр.2.Задание 2.2.11",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.2",
        "description": "Практика первый семестр.2.Задание 2.2.2",
        "peekOfCode": "numbers = list(map(int, input().split()))\ncount = 0\nfor i in range(1, len(numbers)):\n    if numbers[i] > numbers[i - 1]:\n        count += 1\nprint(count)",
        "detail": "Практика первый семестр.2.Задание 2.2.2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.2",
        "description": "Практика первый семестр.2.Задание 2.2.2",
        "peekOfCode": "count = 0\nfor i in range(1, len(numbers)):\n    if numbers[i] > numbers[i - 1]:\n        count += 1\nprint(count)",
        "detail": "Практика первый семестр.2.Задание 2.2.2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.3",
        "description": "Практика первый семестр.2.Задание 2.2.3",
        "peekOfCode": "a = input().split()\nfor i in range(0, len(a) - 1, 2):\n    a[i], a[i + 1] = a[i + 1], a[i]\nprint(*a)",
        "detail": "Практика первый семестр.2.Задание 2.2.3",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.4",
        "description": "Практика первый семестр.2.Задание 2.2.4",
        "peekOfCode": "nums = input().split()\nshifted = [nums[-1]] + nums[:-1]\nprint(*shifted)",
        "detail": "Практика первый семестр.2.Задание 2.2.4",
        "documentation": {}
    },
    {
        "label": "shifted",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.4",
        "description": "Практика первый семестр.2.Задание 2.2.4",
        "peekOfCode": "shifted = [nums[-1]] + nums[:-1]\nprint(*shifted)",
        "detail": "Практика первый семестр.2.Задание 2.2.4",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.5",
        "description": "Практика первый семестр.2.Задание 2.2.5",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(len(set(nums)))",
        "detail": "Практика первый семестр.2.Задание 2.2.5",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.6",
        "description": "Практика первый семестр.2.Задание 2.2.6",
        "peekOfCode": "n = int(input())\nnumbers = [int(input()) for _ in range(n)]\nx = int(input())\nfound = False\nfor i in range(n):\n    for j in range(n):\n        if i != j and numbers[i] * numbers[j] == x:\n            found = True\n            break\n    if found:",
        "detail": "Практика первый семестр.2.Задание 2.2.6",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.6",
        "description": "Практика первый семестр.2.Задание 2.2.6",
        "peekOfCode": "numbers = [int(input()) for _ in range(n)]\nx = int(input())\nfound = False\nfor i in range(n):\n    for j in range(n):\n        if i != j and numbers[i] * numbers[j] == x:\n            found = True\n            break\n    if found:\n        break",
        "detail": "Практика первый семестр.2.Задание 2.2.6",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.6",
        "description": "Практика первый семестр.2.Задание 2.2.6",
        "peekOfCode": "x = int(input())\nfound = False\nfor i in range(n):\n    for j in range(n):\n        if i != j and numbers[i] * numbers[j] == x:\n            found = True\n            break\n    if found:\n        break\nprint(\"ДА\" if found else \"НЕТ\")",
        "detail": "Практика первый семестр.2.Задание 2.2.6",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.6",
        "description": "Практика первый семестр.2.Задание 2.2.6",
        "peekOfCode": "found = False\nfor i in range(n):\n    for j in range(n):\n        if i != j and numbers[i] * numbers[j] == x:\n            found = True\n            break\n    if found:\n        break\nprint(\"ДА\" if found else \"НЕТ\")",
        "detail": "Практика первый семестр.2.Задание 2.2.6",
        "documentation": {}
    },
    {
        "label": "timur",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.7.1",
        "description": "Практика первый семестр.2.Задание 2.2.7.1",
        "peekOfCode": "timur = input().strip()\nruslan = input().strip()\nif timur == ruslan:\n    print(\"ничья\")\nelif (timur == \"камень\" and ruslan == \"ножницы\") or \\\n(timur == \"ножницы\" and ruslan == \"бумага\") or \\\n(timur == \"бумага\" and ruslan == \"камень\"):\n    print(\"Тимур\")\nelse:\n    print(\"Руслан\")",
        "detail": "Практика первый семестр.2.Задание 2.2.7.1",
        "documentation": {}
    },
    {
        "label": "ruslan",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.7.1",
        "description": "Практика первый семестр.2.Задание 2.2.7.1",
        "peekOfCode": "ruslan = input().strip()\nif timur == ruslan:\n    print(\"ничья\")\nelif (timur == \"камень\" and ruslan == \"ножницы\") or \\\n(timur == \"ножницы\" and ruslan == \"бумага\") or \\\n(timur == \"бумага\" and ruslan == \"камень\"):\n    print(\"Тимур\")\nelse:\n    print(\"Руслан\")",
        "detail": "Практика первый семестр.2.Задание 2.2.7.1",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.7.2",
        "description": "Практика первый семестр.2.Задание 2.2.7.2",
        "peekOfCode": "rules = {\"камень\": \"ножницы\", \"ножницы\": \"бумага\", \"бумага\": \"камень\"}\nprint(\"ничья\" if timur == ruslan else \"Тимур\" if rules[timur] == ruslan else \"Руслан\")",
        "detail": "Практика первый семестр.2.Задание 2.2.7.2",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.8",
        "description": "Практика первый семестр.2.Задание 2.2.8",
        "peekOfCode": "rules = {\n    \"ножницы\": {\"бумага\", \"ящерица\"},\n    \"бумага\": {\"камень\", \"Спок\"},\n    \"камень\": {\"ножницы\", \"ящерица\"},\n    \"ящерица\": {\"Спок\", \"бумага\"},\n    \"Спок\": {\"ножницы\", \"камень\"}\n}\nif timur == ruslan:\n    print(\"ничья\")\nelif ruslan in rules[timur]:",
        "detail": "Практика первый семестр.2.Задание 2.2.8",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Практика первый семестр.2.Задание 2.2.9",
        "description": "Практика первый семестр.2.Задание 2.2.9",
        "peekOfCode": "s = input()\nprint(max(map(len, s.split(\"О\"))))",
        "detail": "Практика первый семестр.2.Задание 2.2.9",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "Практика первый семестр.3.Задание 3.1",
        "description": "Практика первый семестр.3.Задание 3.1",
        "peekOfCode": "def func(num1, num2):\n    return num1 % num2 == 0\n# ввод чисел\na = int(input())\nb = int(input())\nif func(a, b):\n    print(\"делится\")\nelse:\n    print(\"не делится\")",
        "detail": "Практика первый семестр.3.Задание 3.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.1",
        "description": "Практика первый семестр.3.Задание 3.1",
        "peekOfCode": "a = int(input())\nb = int(input())\nif func(a, b):\n    print(\"делится\")\nelse:\n    print(\"не делится\")",
        "detail": "Практика первый семестр.3.Задание 3.1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.1",
        "description": "Практика первый семестр.3.Задание 3.1",
        "peekOfCode": "b = int(input())\nif func(a, b):\n    print(\"делится\")\nelse:\n    print(\"не делится\")",
        "detail": "Практика первый семестр.3.Задание 3.1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.2",
        "description": "Практика первый семестр.3.Задание 3.Практика.2",
        "peekOfCode": "a = 6\nb = 10\nprint(not a == 10 and b == 10)",
        "detail": "Практика первый семестр.3.Задание 3.Практика.2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.2",
        "description": "Практика первый семестр.3.Задание 3.Практика.2",
        "peekOfCode": "b = 10\nprint(not a == 10 and b == 10)",
        "detail": "Практика первый семестр.3.Задание 3.Практика.2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.3",
        "description": "Практика первый семестр.3.Задание 3.Практика.3",
        "peekOfCode": "a = 6\nb = 10\nprint(not(not a == 10 or not b == 10))",
        "detail": "Практика первый семестр.3.Задание 3.Практика.3",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.3",
        "description": "Практика первый семестр.3.Задание 3.Практика.3",
        "peekOfCode": "b = 10\nprint(not(not a == 10 or not b == 10))",
        "detail": "Практика первый семестр.3.Задание 3.Практика.3",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.4",
        "description": "Практика первый семестр.3.Задание 3.Практика.4",
        "peekOfCode": "numbers = [-6, -8, 0, 1, 3, 8, -7, 12, 17, 24, 25, 3, 5, 1]\nres = 0\nfor num in numbers:\n    res += (num % 2 == 1) and (num > 1)\nprint(res)",
        "detail": "Практика первый семестр.3.Задание 3.Практика.4",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика.4",
        "description": "Практика первый семестр.3.Задание 3.Практика.4",
        "peekOfCode": "res = 0\nfor num in numbers:\n    res += (num % 2 == 1) and (num > 1)\nprint(res)",
        "detail": "Практика первый семестр.3.Задание 3.Практика.4",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика",
        "description": "Практика первый семестр.3.Задание 3.Практика",
        "peekOfCode": "num1 = 3 * True - (True + False)\nnum2 = (True + True + False) ** 3 + 5\nprint(num1 + num2)",
        "detail": "Практика первый семестр.3.Задание 3.Практика",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "Практика первый семестр.3.Задание 3.Практика",
        "description": "Практика первый семестр.3.Задание 3.Практика",
        "peekOfCode": "num2 = (True + True + False) ** 3 + 5\nprint(num1 + num2)",
        "detail": "Практика первый семестр.3.Задание 3.Практика",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.11",
        "description": "Практика первый семестр.4.4.1.Задание 4.11",
        "peekOfCode": "words = ['Hello', 'Python']\nprint('-'.join(words))",
        "detail": "Практика первый семестр.4.4.1.Задание 4.11",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.12",
        "description": "Практика первый семестр.4.4.1.Задание 4.12",
        "peekOfCode": "numbers = [10, 20, 30, 40]\ndel numbers[0:6]\nprint(numbers)",
        "detail": "Практика первый семестр.4.4.1.Задание 4.12",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.13",
        "description": "Практика первый семестр.4.4.1.Задание 4.13",
        "peekOfCode": "words = ['xyz', 'zara', 'beegeek']\nprint(max(words))",
        "detail": "Практика первый семестр.4.4.1.Задание 4.13",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.14",
        "description": "Практика первый семестр.4.4.1.Задание 4.14",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5, 6, 7]\nnew_numbers = [2 * x for x in numbers]\nprint(new_numbers)",
        "detail": "Практика первый семестр.4.4.1.Задание 4.14",
        "documentation": {}
    },
    {
        "label": "new_numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.14",
        "description": "Практика первый семестр.4.4.1.Задание 4.14",
        "peekOfCode": "new_numbers = [2 * x for x in numbers]\nprint(new_numbers)",
        "detail": "Практика первый семестр.4.4.1.Задание 4.14",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.6",
        "description": "Практика первый семестр.4.4.1.Задание 4.6",
        "peekOfCode": "numbers = [10, 20, 30, 40, 50, 60, 70, 80]\nprint(numbers[2:5])\nprint(numbers[:4])\nprint(numbers[3:])",
        "detail": "Практика первый семестр.4.4.1.Задание 4.6",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.7",
        "description": "Практика первый семестр.4.4.1.Задание 4.7",
        "peekOfCode": "numbers = [10, 20, 30, 40, 50]\nnumbers.append(60)\nprint(numbers)\nnumbers.append(60)\nprint(numbers)",
        "detail": "Практика первый семестр.4.4.1.Задание 4.7",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.1.Задание 4.8",
        "description": "Практика первый семестр.4.4.1.Задание 4.8",
        "peekOfCode": "numbers = [10, 20, 30, 40, 50]\nnumbers.pop()\nprint(numbers)\nnumbers.pop(2)\nprint(numbers)",
        "detail": "Практика первый семестр.4.4.1.Задание 4.8",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.1",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.1",
        "peekOfCode": "list1 = [[1, 8, 9], [4, 8, 12, 16], [0, 2, 7]]\nprint(list1[0][1] + list1[1][2] + list1[2][2])",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.1",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.2",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.2",
        "peekOfCode": "list1 = [[1, 8, 9], [4, 8, 12, 16], [0, 2, 7]]\nprint(list1[0][1] + list1[3][2] + list1[2][2])",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.2",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.3",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.3",
        "peekOfCode": "list1 = ['Beegeek', [4, 8, 12, 16]]\nprint(list1[0][1])\nprint(list1[1][3])",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.3",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.4",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.4",
        "peekOfCode": "list1 = [[0, [9, 2]], [1, [4, 6, 3], [5, 2, 3], 8, 3]]\nprint(list1[1][2][1])",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.4",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.5",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.5",
        "peekOfCode": "list1 = [[1, 2, 3], [4, 5], [8], [1, 2, 3, 4]]\nprint(len(list1))",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.5",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.6",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.6",
        "peekOfCode": "list1 = [[[1, 1, 0], [0, 1, 1]], [[0, 1], [1, 1], [1, 0]]]\nprint(len(list1))",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.6",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.7",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.7",
        "peekOfCode": "list1 = [[1, 8, 7, 4], [1, 3, 4, 5], [2, 7, 2], [2, 6, 7, 8]]\nlist1.reverse()\nprint(list1)",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.7",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.8",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.8",
        "peekOfCode": "list1 = [[1, 8, 7, 4], [1, 3, 4, 5, 6], [2, 7, 2], [2, 6, 7, 8]]\nprint(max(list1))",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.8",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Практика первый семестр.4.4.2.Задание 4.2.9",
        "description": "Практика первый семестр.4.4.2.Задание 4.2.9",
        "peekOfCode": "list1 = [[1, 8, 7, 4], [1, 3, 4, 5, 6], [2, 7, 2], [2, 6, 7, 8]]\ndel list1[1]\nprint(list1)",
        "detail": "Практика первый семестр.4.4.2.Задание 4.2.9",
        "documentation": {}
    }
]